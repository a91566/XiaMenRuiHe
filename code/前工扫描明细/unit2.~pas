unit unit2;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DB, DBClient, Grids, DBGridEh, StdCtrls, Buttons, Mask,
  DBCtrlsEh, RzLabel, ExtCtrls, RzPanel, RzTabs, MConnect, SConnect,
  ComCtrls, DBGridEhImpExp, Menus, frxClass, psBarcode, frxCross, frxDBSet,
  IdBaseComponent, IdComponent, IdIPWatch;

type
  TForm2 = class(TForm)
    DataSource1: TDataSource;
    ClientDataSet1: TClientDataSet;
    Timer1: TTimer;
    RzPageControl1: TRzPageControl;
    Timer2: TTimer;
    Image1: TImage;
    TabSheet2: TRzTabSheet;
    RzPanel1: TRzPanel;
    DBGridEh1: TDBGridEh;
    ClientDataSet10: TClientDataSet;
    ClientDataSet11: TClientDataSet;
    CDSFF: TClientDataSet;
    LabeledEdit1: TLabeledEdit;
    IdIPWatch1: TIdIPWatch;
    Button1: TButton;
    Label1: TLabel;
    DateTimePicker1: TDateTimePicker;
    DateTimePicker2: TDateTimePicker;
    CheckBox1: TCheckBox;
    Button2: TButton;
    SaveDialog1: TSaveDialog;
    Button3: TButton;
    Label2: TLabel;
    ComboBox1: TComboBox;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
    procedure Image1DblClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
  private
    procedure CreateParams(var Params: TCreateParams); override;
    { Private declarations }
  public

    { Public declarations }
  end;
const cReadMe = '前工程用料扫描,功能说明:' +
  #13 + #10 + '因为此功能会涉及很多并发操作，故此模块功能用下列方法实现' +
    #13 + #10 + '扫描枪扫描传输过来的数据将不做任何判断对错，全部接受至ListBox（条码最长100位）' +
    #13 + #10 + '一个Timer每秒执行一个动作，取ListBox第一条数据(依然不做任何解析)，插入数据库表QGCYLSM_Temp' +
    #13 + #10 + '到此前台任务算是结束。' +
    #13 + #10 + '系统后台需要定义一个存储过程定时去执行，取QGCYLSM_Temp数据，将其解析至表QGCYLSM。' +
    #13 + #10 + '存储过程一分钟执行一次，一次取10条数据，插入成功后标记为已操作。' +
    #13 + #10 + #13 + #10 + '2015年4月11日 10:04:02 郑少宝';

var
  Form2: TForm2;

implementation

uses UDM, ZsbFunPro2, ZsbDLL2, DateUtils, ZsbVariable2;

{$R *.dfm}

procedure TForm2.CreateParams(var Params: TCreateParams);
begin
  inherited;
  Params.WndParent := 0; //重载 显示在任务栏
end;



procedure TForm2.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  Action := caFree;
end;

procedure TForm2.FormCreate(Sender: TObject);
begin
  Self.Left := 0;
  Self.Top := 0;
  Self.Width:=Screen.Width;  
  Self.Height:=Screen.Height;
end;

procedure TForm2.FormShow(Sender: TObject);
begin
  AnimateWindow(Handle, 200, AW_CENTER); //窗口由小变大
end;   

procedure TForm2.Timer1Timer(Sender: TObject);
var
  h: THandle;
  bit: TBitmap;
begin
  Timer1.Enabled := False;
  if FileExists(ExtractFilePath(Application.Exename) + 'BitBtnImageFormZsbDll2.dll') then
  begin
    h := LoadLibrary('BitBtnImageFormZsbDll2.dll'); //载入 DLL
    bit := TBitmap.Create;
    bit.LoadFromResourceName(h, 'imgLZtopForZhuiSuSYS2'); //提取资源
    Image1.Picture.Assign(bit);
    FreeLibrary(h); //载卸 DLL
    bit.Free;
  end;
  RzPageControl1.Visible := True;
  RzPageControl1.ActivePageIndex := 0;
  DateTimePicker1.Date:=Now;   
  DateTimePicker2.Date:=Now;
end;

procedure TForm2.Timer2Timer(Sender: TObject);
begin
  Timer2.Enabled := False;
  try
    FDM := TFDM.Create(nil);
    FDM.RestartLink; //创建数据库连接
    if FDM.booPuLinkDBSta = False then
    begin
      if Application.MessageBox(PChar(FDM.strPuLinkError), '错误信息', MB_ICONERROR + MB_RETRYCANCEL) = idRETRY then
      begin
        FDM.RestartLink;
      end
      else
      begin
        Self.Close;
      end;
    end;
    Button1.Click;
  finally

  end;
end;

procedure TForm2.Image1DblClick(Sender: TObject);
begin
  ZsbShowMessageNoApp(Self, cReadMe);
end;

procedure TForm2.Button1Click(Sender: TObject);
var
  strsql, temp1, temp2: string;
begin
  strsql := 'select * from QGCYLSM_Temp where 1=1 ';
  if CheckBox1.Checked then
  begin
    temp1 := FormatDateTime('yyyy-mm-dd', DateTimePicker1.Date) + ' 00:00:00';
    temp2 := FormatDateTime('yyyy-mm-dd', DateTimePicker2.Date) + ' 23:59:59';
    strsql := strsql + ' and sysdt>=''' + temp1 + ''' and sysdt<=''' + temp2 + '''';
  end;
  if LabeledEdit1.Text<>'' then
  begin
     strsql:=strsql+' and Code2D like ''%'+LabeledEdit1.Text+'%''';
  end;
  case ComboBox1.ItemIndex of
    1: strsql:=strsql+' and state=''0''';
    2: strsql:=strsql+' and state=''1''';
    3: strsql:=strsql+' and state=''9''';
  end;
  strsql := strsql + ' order by id';
  SelectClientDataSet(ClientDataSet1, strsql);
end;

procedure TForm2.Button2Click(Sender: TObject);
begin
  if ClientDataSet1.RecordCount=0 then Exit;
  try
    SaveDialog1.FileName := '前工程用料扫描原始数据 ' + FormatDateTime('yyyyMMddHHmmss', Now) + '.xls';
    SaveDialog1.filter := 'Execl(*.xls)|*.xls';
    if SaveDialog1.Execute then
    begin
      SaveDBGridEhToExportFile(TDBGridEhExportAsXls, DBGridEh1, SaveDialog1.FileName, true);
      zsbSimpleMSNPopUpShow('文件导出成功！' + SaveDialog1.FileName);
    end;
  except
    on e: Exception do
    begin
      zsbSimpleMSNPopUpShow_2('操作失败,请联系管理员.' + e.Message, clRed, 500);
    end;
  end;
end;

procedure TForm2.Button3Click(Sender: TObject);
var
  exsql,TempID:string;
begin
  TempID:=ClientDataSet1.FieldByName('id').AsString;
  if TempID='' then Exit;
  exsql:='update QGCYLSM_Temp set state=''9'' where id='''+TempID+'''';
  if EXSQLClientDataSet(ClientDataSet10,exsql) then
  begin
    zsbSimpleMSNPopUpShow('is ok');
    Button1.Click;
    ClientDataSet1.Locate('id',TempID,[]);
  end
  else
  begin
    ZsbMsgErrorInfoNoApp(Self,'操作失败,请联系管理员.');
  end;
end;

end.

